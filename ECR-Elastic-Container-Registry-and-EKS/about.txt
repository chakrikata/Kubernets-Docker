Fully Managed, Secure, Highly Available and Simplified Workflow

ECR
--> ECS
--> EKS
--> On-Prem



ECR Terminology:
Registry: An ECR registry is provided to each AWS account; we can create image repositories in our registry and store images in them.
Repository: An ECR image repository contains our Docker images.
Repository policy: We can control access to our repositories and the images within them with repository policies.
Authorization token: Our Docker client must authenticate to Amazon ECR registries as an AWS user before it can push and pull images. The AWS CLI get-login command provides us with authentication credentials to pass to Docker.
Image: We can push and pull container images to our repositories.


Steps:
We are going build a Docker image
Push to ECR Repository
Update that ECR Image Repository URL in our Kubernetes Deployment manifest
Deploy to EKS
Kubernetes Deployment, NodePort Service, Ingress Service and External-DNS will be used to depict a full-on deployment
We will access the ECR Demo Application using registered dns http://ecrdemo.kubeoncloud.com

Pre-Req:
Install required CLI software on your local desktop
Install AWS CLI V2 version
Install Docker CLI
Configure AWS CLI with Authorization Token
  - aws configure
AWS Access Key ID: ****
AWS Secret Access Key: ****
Default Region Name: us-east-1


Create ECR Repo using AWS CLI:
aws ecr create-repository --repository-name aws-ecr-kubenginx --region us-east-1
# Build Docker Image
docker build -t <ECR-REPOSITORY-URI>:<TAG> . 
docker build -t 180789647333.dkr.ecr.us-east-1.amazonaws.com/aws-ecr-kubenginx:1.0.0 . 

# Run Docker Image locally & Test
docker run --name <name-of-container> -p 80:80 --rm -d <ECR-REPOSITORY-URI>:<TAG>
docker run --name aws-ecr-kubenginx -p 80:80 --rm -d 180789647333.dkr.ecr.us-east-1.amazonaws.com/aws-ecr-kubenginx:1.0.0

# Access Application locally
http://localhost

# Stop Docker Container
docker ps
docker stop aws-ecr-kubenginx
docker ps -a -q


Push Image:
# Get Login Password
aws ecr get-login-password --region <your-region> | docker login --username AWS --password-stdin <ECR-REPOSITORY-URI>
aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 180789647333.dkr.ecr.us-east-1.amazonaws.com/aws-ecr-kubenginx

# Push the Docker Image
docker push <ECR-REPOSITORY-URI>:<TAG>
docker push 180789647333.dkr.ecr.us-east-1.amazonaws.com/aws-ecr-kubenginx:1.0.0



